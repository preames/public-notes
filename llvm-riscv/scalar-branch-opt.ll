; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=riscv64 -mattr=+v,+unaligned-scalar-mem < %s | FileCheck %s

target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-linux-gnu"

declare void @foo()

; TODO: Two problems here:
; 1) The blt should be reversed into a bge to avoid the add
define void @test(i64 %a, i64 %b) {
; CHECK-LABEL: test:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    blt a0, a1, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %taken
; CHECK-NEXT:    addi sp, sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    call foo
; CHECK-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, 16
; CHECK-NEXT:  .LBB0_2: # %exit
; CHECK-NEXT:    ret
entry:
  %add1 = add i64 %a, 1
  %cmp = icmp slt i64 %add1, %b
  br i1 %cmp, label %exit, label %taken
taken:
  call void @foo()
  ret void
exit:
  ret void
}

declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg)
